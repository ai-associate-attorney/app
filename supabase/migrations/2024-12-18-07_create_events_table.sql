CREATE TABLE events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text NOT NULL,
    description text,
    event_type text NOT NULL,
    start_time timestamp with time zone NOT NULL,
    end_time timestamp with time zone NOT NULL,
    location text,
    attendees jsonb DEFAULT '[]'::jsonb,
    matter_id bigint REFERENCES matters(id) ON DELETE CASCADE,
    created_by uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Create indexes
CREATE INDEX events_matter_id_idx ON events(matter_id);
CREATE INDEX events_created_by_idx ON events(created_by);
CREATE INDEX events_start_time_idx ON events(start_time);

-- Enable RLS
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view events in their matters"
    ON events FOR SELECT
    USING (
        matter_id IN (
            SELECT id FROM matters WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can create events in their matters"
    ON events FOR INSERT
    WITH CHECK (
        matter_id IN (
            SELECT id FROM matters WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can update events in their matters"
    ON events FOR UPDATE
    USING (
        matter_id IN (
            SELECT id FROM matters WHERE created_by = auth.uid()
        )
    );

CREATE POLICY "Users can delete events in their matters"
    ON events FOR DELETE
    USING (
        matter_id IN (
            SELECT id FROM matters WHERE created_by = auth.uid()
        )
    );

-- Create trigger for updated_at
CREATE TRIGGER update_events_updated_at
    BEFORE UPDATE ON events
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 