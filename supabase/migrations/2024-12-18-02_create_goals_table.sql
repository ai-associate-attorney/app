-- Create goals table
CREATE TABLE goals (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar NOT NULL,
    description text,
    status varchar DEFAULT 'in_progress',
    priority varchar DEFAULT 'medium',
    due_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    related_files jsonb
);

-- Create indexes
CREATE INDEX goals_created_by_idx ON goals(created_by);
CREATE INDEX goals_status_idx ON goals(status);
CREATE INDEX goals_due_date_idx ON goals(due_date);

-- Enable RLS
ALTER TABLE goals ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own goals" 
    ON goals FOR SELECT 
    USING (auth.uid() = created_by);

CREATE POLICY "Users can insert their own goals" 
    ON goals FOR INSERT 
    WITH CHECK (auth.uid() = created_by);

CREATE POLICY "Users can update their own goals" 
    ON goals FOR UPDATE 
    USING (auth.uid() = created_by);

CREATE POLICY "Users can delete their own goals" 
    ON goals FOR DELETE 
    USING (auth.uid() = created_by);

-- Create function and trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_goals_updated_at
    BEFORE UPDATE ON goals
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 